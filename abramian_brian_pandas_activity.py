# -*- coding: utf-8 -*-
"""Abramian_Brian_Pandas_Activity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KuIyq-cmIWxOlnQMFiRPMlGaof-jvfe0
"""

# Uploading dataset to Colab
from google.colab import files
uploaded = files.upload()

import io
import pandas as pd
df = pd.read_csv(io.BytesIO(uploaded['South_Carolina_State_Employee_Salary_Database (1).csv']))
# Dataset is now stored in a Pandas Dataframe

# Increasing max columns to display more columns, and width to fit them on screen
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)

# Printing first/Last 50 rows & elements in the database
print('First 50 rows are:\n', df.head(50))
print('Last 50 rows are:\n', df.tail(50))

# Describe prints all df methods in proper format
print(df.describe())

# Creating a subset of rows, then displaying the first ten rows
subsetR_df = df[145:518:3]
print('First ten rows of the subset:\n', subsetR_df.head(10))

# Creating a subset of columns, then displaying the first ten rows of that subset
subsetC_temp = df.loc[:, 'First':'Base Salary':2]
print('First ten rows of the column Subset:\n', subsetC_temp.head(10))

# Filtering out all rows with Title "Professor", then displaying first 10 rows
df = df[df['Title'] != 'PROFESSOR']
print('No professors: \n', df.head(50))

# Filtering out all rows with null value in a column, All rows have a null so they're all filtered out
df_temp = df[df.Middle.notnull()]
print('First ten not null:\n', df_temp.head(10))

# Printing first 10 rows
print('Before raises:\n', df.head(10),'\n\n')

# Adding 10% to each salary and compensation for everyone, then printing first 10 rows
df['Base Salary'] += (df['Base Salary'] * .1)
df['Total Compensation'] += (df['Total Compensation'] * .1)

print('Raised salaries:\n', df.head(10))

# Prints every row in ascending order based on Total Compensation
sorted = df.sort_values(by=['Total Compensation'], ascending = [True])
print('Sorted ascending\n', sorted)

# Printing rows grouped by the mean of the Title column
group = df.groupby(['Title']).mean()
print('Mean of titles:\n', group)

# Scatter plot of data based on salary and total compensation
import matplotlib.pyplot as plt
df.plot(kind='scatter',x='Base Salary',y='Total Compensation',color='red')
plt.show()

# Bar Graph of data based on salary and total compensation
df.head(500).plot(kind='bar',x='Base Salary',y='Total Compensation',color='green')
plt.show()

# Line graph of data based on salary and total compensation
ax = plt.gca()

df.plot(kind='line',x='Base Salary',y='Total Compensation',ax=ax)
plt.show()